export declare const ATTACHMENT_UPLOADER_STYLES = "\n    .attachment-uploader {\n      display: grid;\n      gap: 10px;\n    }\n    .attachment-uploader__dropzone {\n      border: 2px dashed rgba(15, 23, 42, 0.18);\n      border-radius: 16px;\n      padding: 20px;\n      display: grid;\n      gap: 10px;\n      justify-items: start;\n      background: rgba(255, 255, 255, 0.7);\n      transition: border-color 0.2s ease, background 0.2s ease, box-shadow 0.2s ease;\n      cursor: pointer;\n      outline: none;\n    }\n    .attachment-uploader__dropzone:focus-visible {\n      border-color: var(--accent);\n      box-shadow: 0 0 0 4px var(--ring);\n    }\n    .attachment-uploader[data-attachment-active=\"true\"] .attachment-uploader__dropzone {\n      border-color: var(--accent);\n      background: rgba(29, 78, 216, 0.05);\n      box-shadow: 0 16px 32px rgba(29, 78, 216, 0.15);\n    }\n    .attachment-uploader[data-attachment-error=\"true\"] .attachment-uploader__dropzone {\n      border-color: var(--error);\n      background: rgba(185, 28, 28, 0.08);\n    }\n    .attachment-uploader__icon {\n      width: 40px;\n      height: 40px;\n      border-radius: 12px;\n      display: grid;\n      place-items: center;\n      font-size: 1.2rem;\n      background: rgba(15, 23, 42, 0.08);\n      color: var(--accent);\n    }\n    .attachment-uploader__title {\n      font-weight: 600;\n      font-size: 0.95rem;\n      margin: 0;\n      color: var(--text);\n    }\n    .attachment-uploader__hint {\n      margin: 0;\n      color: var(--subtle);\n      font-size: 0.85rem;\n    }\n    .attachment-uploader__actions {\n      display: inline-flex;\n      gap: 8px;\n      align-items: center;\n      flex-wrap: wrap;\n      font-size: 0.85rem;\n      color: var(--muted);\n    }\n    .attachment-uploader__browse {\n      border: none;\n      border-radius: 999px;\n      padding: 6px 14px;\n      background: var(--accent);\n      color: #fff;\n      font-weight: 600;\n      font-size: 0.85rem;\n      cursor: pointer;\n      transition: transform 0.2s ease, box-shadow 0.2s ease;\n    }\n    .attachment-uploader__browse:hover,\n    .attachment-uploader__browse:focus-visible {\n      transform: translateY(-1px);\n      box-shadow: 0 12px 20px rgba(29, 78, 216, 0.24);\n      outline: none;\n    }\n    .attachment-uploader__status {\n      margin: 0;\n      font-size: 0.8rem;\n      color: var(--muted);\n    }\n    .attachment-uploader__status[data-tone=\"ready\"] {\n      color: var(--success);\n    }\n    .attachment-uploader__status[data-tone=\"error\"] {\n      color: var(--error);\n    }\n    .attachment-uploader__clear {\n      justify-self: start;\n      border: none;\n      background: transparent;\n      color: var(--accent);\n      font-size: 0.8rem;\n      font-weight: 600;\n      cursor: pointer;\n      padding: 0;\n    }\n    .attachment-uploader__clear:hover,\n    .attachment-uploader__clear:focus-visible {\n      text-decoration: underline;\n      outline: none;\n    }\n";
export declare const ATTACHMENT_UPLOADER_RUNTIME = "(() => {\n  const initialize = () => {\n    const uploaders = Array.from(\n      document.querySelectorAll('[data-attachment-root]'),\n    );\n\n    if (!uploaders.length) {\n      return;\n    }\n\n    const toTokens = (accept) => {\n      if (!accept) return [];\n      return accept\n        .split(',')\n        .map((token) => token.trim().toLowerCase())\n        .filter((token) => token.length > 0);\n    };\n\n    const formatBytes = (value) => {\n      if (!Number.isFinite(value) || value <= 0) return '0 B';\n      const units = ['B', 'KB', 'MB', 'GB'];\n      let size = value;\n      let unit = 0;\n      while (size >= 1024 && unit < units.length - 1) {\n        size /= 1024;\n        unit += 1;\n      }\n      const precision = size < 10 && unit > 0 ? 1 : 0;\n      return size.toFixed(precision) + ' ' + units[unit];\n    };\n\n    const acceptsFile = (file, tokens) => {\n      if (!tokens.length) return true;\n      const type = (file.type || '').toLowerCase();\n      const name = (file.name || '').toLowerCase();\n      return tokens.some((token) => {\n        if (!token) return false;\n        if (token === '*') return true;\n        if (token.startsWith('.')) {\n          return name.endsWith(token);\n        }\n        if (token.endsWith('/*')) {\n          const prefix = token.slice(0, -1);\n          return type.startsWith(prefix);\n        }\n        return type === token;\n      });\n    };\n\n    uploaders.forEach((root) => {\n      if (!(root instanceof HTMLElement)) return;\n      if (root.getAttribute('data-attachment-initialized') === 'true') {\n        return;\n      }\n      root.setAttribute('data-attachment-initialized', 'true');\n      const input = root.querySelector('[data-attachment-input]');\n      const dropzone = root.querySelector('[data-attachment-dropzone]');\n      const browseButton = root.querySelector('[data-attachment-browse]');\n      const statusEl = root.querySelector('[data-attachment-status]');\n      const clearButton = root.querySelector('[data-attachment-clear]');\n      const emptyText = root.getAttribute('data-attachment-empty') || 'No files selected yet.';\n      const acceptTokens = toTokens(root.getAttribute('data-attachment-accept') || (input && input.getAttribute('accept')) || '');\n\n      if (!(input instanceof HTMLInputElement)) {\n        return;\n      }\n\n      const setStatus = (message, tone = 'idle') => {\n        if (!(statusEl instanceof HTMLElement)) {\n          return;\n        }\n        statusEl.textContent = message;\n        statusEl.setAttribute('data-tone', tone);\n      };\n\n      const syncFromInput = () => {\n        if (!(input instanceof HTMLInputElement)) {\n          return;\n        }\n        const files = input.files ? Array.from(input.files) : [];\n        if (files.length === 0) {\n          setStatus(emptyText, 'idle');\n          if (clearButton instanceof HTMLButtonElement) {\n            clearButton.hidden = true;\n          }\n          return;\n        }\n        const summary = files\n          .map((file) => file.name + ' (' + formatBytes(file.size) + ')')\n          .join(', ');\n        setStatus('Queued: ' + summary, 'ready');\n        if (clearButton instanceof HTMLButtonElement) {\n          clearButton.hidden = false;\n        }\n      };\n\n      const addFiles = (fileList) => {\n        const files = Array.from(fileList || []);\n        if (!files.length) {\n          return;\n        }\n        const accepted = files.filter((file) => acceptsFile(file, acceptTokens));\n        if (!accepted.length) {\n          root.setAttribute('data-attachment-error', 'true');\n          setStatus('Those files are not supported. Use images or PDFs.', 'error');\n          window.setTimeout(() => {\n            root.removeAttribute('data-attachment-error');\n            setStatus(emptyText, 'idle');\n          }, 3000);\n          return;\n        }\n        let transfer;\n        try {\n          transfer = new DataTransfer();\n        } catch (error) {\n          console.warn('DataTransfer not supported', error);\n          return;\n        }\n        if (input.multiple && input.files?.length) {\n          Array.from(input.files).forEach((existing) => {\n            try {\n              transfer.items.add(existing);\n            } catch (error) {\n              console.warn('Failed to retain existing file', error);\n            }\n          });\n        }\n        accepted.forEach((file) => {\n          try {\n            transfer.items.add(file);\n          } catch (error) {\n            console.warn('Failed to queue file', error);\n          }\n        });\n        input.files = transfer.files;\n        input.dispatchEvent(new Event('change', { bubbles: true }));\n        syncFromInput();\n      };\n\n      if (browseButton instanceof HTMLButtonElement) {\n        browseButton.addEventListener('click', (event) => {\n          event.preventDefault();\n          input.click();\n        });\n      }\n\n      if (dropzone instanceof HTMLElement) {\n        const activate = () => root.setAttribute('data-attachment-active', 'true');\n        const deactivate = () => root.removeAttribute('data-attachment-active');\n        dropzone.addEventListener('dragover', (event) => {\n          event.preventDefault();\n          activate();\n        });\n        dropzone.addEventListener('dragleave', deactivate);\n        dropzone.addEventListener('dragend', deactivate);\n        dropzone.addEventListener('drop', (event) => {\n          event.preventDefault();\n          deactivate();\n          if (event.dataTransfer?.files?.length) {\n            addFiles(event.dataTransfer.files);\n          }\n        });\n        dropzone.addEventListener('keydown', (event) => {\n          if (event.key === 'Enter' || event.key === ' ') {\n            event.preventDefault();\n            input.click();\n          }\n        });\n      }\n\n      root.addEventListener('paste', (event) => {\n        if (!event || typeof event !== 'object') {\n          return;\n        }\n        const clipboard = event.clipboardData;\n        if (!clipboard || !clipboard.files || clipboard.files.length === 0) {\n          return;\n        }\n        const target = event.target;\n        if (\n          target instanceof HTMLInputElement ||\n          target instanceof HTMLTextAreaElement ||\n          (target && target.getAttribute && target.getAttribute('contenteditable') === 'true')\n        ) {\n          return;\n        }\n        event.preventDefault();\n        addFiles(clipboard.files);\n      });\n\n      input.addEventListener('change', () => {\n        syncFromInput();\n      });\n\n      if (clearButton instanceof HTMLButtonElement) {\n        clearButton.addEventListener('click', (event) => {\n          event.preventDefault();\n          input.value = '';\n          syncFromInput();\n        });\n      }\n\n      syncFromInput();\n    });\n  };\n\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initialize, { once: true });\n  } else {\n    initialize();\n  }\n})();";
interface AttachmentUploaderOptions {
    inputName: string;
    inputId?: string;
    label?: string;
    hint?: string;
    browseLabel?: string;
    accept?: string;
    multiple?: boolean;
    emptyStatus?: string;
}
export declare function renderAttachmentUploader(options: AttachmentUploaderOptions): string;
export {};
