import type { ModelProvider } from "../../types.js";
import { MODEL_INSPECTOR_STYLES } from "./model-inspector.js";
interface ModelSelectorOptions {
    provider: ModelProvider;
    providerLabel: string;
    selectedModel: string;
    selectId: string;
    customInputId: string;
    inputName: string;
    note?: string;
    hint?: string;
}
export declare function renderModelSelector(options: ModelSelectorOptions): string;
export declare const MODEL_SELECTOR_STYLES = "\n  .model-selector {\n    display: grid;\n    gap: 12px;\n  }\n  .model-custom {\n    display: grid;\n    gap: 12px;\n  }\n  .model-custom[hidden] {\n    display: none;\n  }\n  .model-note {\n    margin: -8px 0 0;\n    font-size: 0.85rem;\n    color: var(--subtle);\n  }\n  .model-hint {\n    margin: 0;\n    font-size: 0.85rem;\n    color: var(--subtle);\n  }\n";
export declare const MODEL_SELECTOR_RUNTIME = "(() => {\n  const globalDataKey = \"__SERVE_LLM_MODEL_SELECTOR_DATA\";\n  const controllers = new WeakMap();\n\n  const getArray = (value) => (Array.isArray(value) ? value : []);\n\n  const formatCost = (cost) => {\n    if (!cost) {\n      return \"\";\n    }\n    const parts = [];\n    if (typeof cost.input === \"number\") {\n      parts.push(\"$\" + cost.input.toFixed(cost.input >= 1 ? 2 : 3) + \" in\");\n    }\n    if (typeof cost.output === \"number\") {\n      parts.push(\"$\" + cost.output.toFixed(cost.output >= 1 ? 2 : 3) + \" out\");\n    }\n    if (typeof cost.reasoning === \"number\") {\n      parts.push(\"$\" + cost.reasoning.toFixed(cost.reasoning >= 1 ? 2 : 3) + \" reasoning\");\n    }\n    if (!parts.length) {\n      return \"\";\n    }\n    return parts.join(\" \u00B7 \") + \" \u00B7 \" + cost.currency + \"/\" + cost.unit;\n  };\n\n  const updateDetail = (container, provider, value, rawValue, data) => {\n    if (!(container instanceof HTMLElement)) {\n      return;\n    }\n    const catalog = getArray(data.catalog[provider]);\n    const metadata = catalog.find((item) => item && item.value === value);\n    container.innerHTML = \"\";\n    const detail = document.createElement(\"div\");\n    detail.className = \"model-detail\";\n    if (metadata) {\n      detail.innerHTML = [\n        '<div class=\"model-detail__header\">',\n        '  <div>',\n        '    <h3 data-model-name></h3>',\n        '    <p class=\"model-detail__tagline\" data-model-tagline></p>',\n        '  </div>',\n        '  <div class=\"model-detail__cost\" data-model-cost></div>',\n        '</div>',\n        '<p class=\"model-detail__description\" data-model-description></p>',\n        '<dl class=\"model-detail__facts\">',\n        '  <div><dt>Context window</dt><dd data-model-context></dd></div>',\n        '  <div><dt>Recommended for</dt><dd data-model-recommended></dd></div>',\n        '  <div><dt>Highlights</dt><dd data-model-highlights></dd></div>',\n        '  <div><dt>Release</dt><dd data-model-release></dd></div>',\n        '</dl>',\n      ].join(\"\");\n      const name = detail.querySelector('[data-model-name]');\n      const tagline = detail.querySelector('[data-model-tagline]');\n      const description = detail.querySelector('[data-model-description]');\n      const context = detail.querySelector('[data-model-context]');\n      const recommended = detail.querySelector('[data-model-recommended]');\n      const highlights = detail.querySelector('[data-model-highlights]');\n      const release = detail.querySelector('[data-model-release]');\n      const cost = detail.querySelector('[data-model-cost]');\n      if (name) name.textContent = metadata.label || value;\n      if (tagline) tagline.textContent = metadata.tagline || \"\";\n      if (description) description.textContent = metadata.description || \"\";\n      if (context) {\n        if (typeof metadata.contextWindow === \"number\") {\n          const unit = metadata.contextWindowUnit || \"tokens\";\n          context.textContent = metadata.contextWindow.toLocaleString() + \" \" + unit;\n        } else {\n          context.textContent = \"\u2014\";\n        }\n      }\n      if (recommended) {\n        recommended.textContent = metadata.recommendedFor || \"Versatile creative work\";\n      }\n      if (highlights) {\n        highlights.innerHTML = \"\";\n        if (Array.isArray(metadata.highlights) && metadata.highlights.length) {\n          metadata.highlights.forEach((item) => {\n            const badge = document.createElement(\"span\");\n            badge.className = \"model-highlight\";\n            badge.textContent = item;\n            highlights.appendChild(badge);\n            highlights.appendChild(document.createTextNode(\" \"));\n          });\n        } else {\n          highlights.textContent = \"\u2014\";\n        }\n      }\n      if (release) {\n        release.textContent = metadata.release || \"\u2014\";\n      }\n      if (cost) {\n        cost.textContent = formatCost(metadata.cost) || \"Cost info coming soon\";\n      }\n    } else {\n      detail.innerHTML = [\n        '<div class=\"model-detail__header\">',\n        '  <div>',\n        '    <h3 data-model-name></h3>',\n        '    <p class=\"model-detail__tagline\">Custom model</p>',\n        '  </div>',\n        '</div>',\n        '<p class=\"model-detail__description\" data-model-description></p>',\n        '<dl class=\"model-detail__facts\">',\n        '  <div><dt>Context window</dt><dd data-model-context>\u2014</dd></div>',\n        '  <div><dt>Recommended for</dt><dd data-model-recommended>Define your own sweet spot.</dd></div>',\n        '  <div><dt>Highlights</dt><dd data-model-highlights>\u2014</dd></div>',\n        '  <div><dt>Cost</dt><dd data-model-cost>Cost info coming soon</dd></div>',\n        '</dl>',\n      ].join(\"\");\n      const name = detail.querySelector('[data-model-name]');\n      const description = detail.querySelector('[data-model-description]');\n      if (name) name.textContent = rawValue || value || \"Custom model\";\n      if (description) {\n        description.textContent =\n          \"Provide a custom model identifier supported by the provider. Tune token budgets below to match the tier.\";\n      }\n    }\n    container.appendChild(detail);\n  };\n\n  const updateLineup = (container, provider, value, data) => {\n    if (!(container instanceof HTMLElement)) {\n      return;\n    }\n    const catalog = getArray(data.catalog[provider]);\n    const featured = catalog.filter((item) => item && item.featured);\n    container.innerHTML = \"\";\n    if (!featured.length) {\n      container.hidden = true;\n      return;\n    }\n    container.hidden = false;\n    const title = document.createElement(\"span\");\n    title.className = \"model-lineup__title\";\n    title.textContent = \"Quick swap\";\n    const grid = document.createElement(\"div\");\n    grid.className = \"model-lineup__grid\";\n    featured.forEach((model) => {\n      const button = document.createElement(\"button\");\n      button.type = \"button\";\n      button.className = \"model-lineup__button\";\n      if (model.value === value) {\n        button.classList.add(\"is-active\");\n      }\n      button.dataset.modelChoice = model.value;\n      button.dataset.modelChoiceLabel = model.label || model.value;\n      const name = document.createElement(\"span\");\n      name.className = \"model-lineup__name\";\n      name.textContent = model.label || model.value;\n      const tag = document.createElement(\"span\");\n      tag.className = \"model-lineup__tag\";\n      tag.textContent = model.tagline || \"\";\n      button.appendChild(name);\n      button.appendChild(tag);\n      grid.appendChild(button);\n    });\n    container.appendChild(title);\n    container.appendChild(grid);\n  };\n\n  const ensureOptions = (selectEl, provider, rawValue, resolvedValue, data) => {\n    if (!(selectEl instanceof HTMLSelectElement)) {\n      return;\n    }\n    const catalog = getArray(data.catalog[provider]);\n    const fragment = document.createDocumentFragment();\n    catalog.forEach((model) => {\n      if (!model || typeof model.value !== \"string\") {\n        return;\n      }\n      const option = document.createElement(\"option\");\n      option.value = model.value;\n      option.textContent = model.label;\n      fragment.appendChild(option);\n    });\n    const candidate = (rawValue && rawValue.trim()) || resolvedValue || \"\";\n    if (candidate && !catalog.some((model) => model && model.value === candidate)) {\n      const option = document.createElement(\"option\");\n      option.value = candidate;\n      option.textContent = candidate + \" (current)\";\n      fragment.appendChild(option);\n    }\n    const custom = document.createElement(\"option\");\n    custom.value = \"__custom\";\n    custom.textContent = \"Custom\u2026\";\n    fragment.appendChild(custom);\n    selectEl.innerHTML = \"\";\n    selectEl.appendChild(fragment);\n  };\n\n  const getData = () => {\n    const data = window[globalDataKey] || {};\n    return {\n      catalog: data.catalog || {},\n      defaults: data.defaults || {},\n      labels: data.labels || {},\n    };\n  };\n\n  const init = (root, options = {}) => {\n    if (!(root instanceof HTMLElement)) {\n      return null;\n    }\n    if (controllers.has(root)) {\n      return controllers.get(root);\n    }\n    const data = getData();\n    const hiddenInput = root.querySelector('[data-model-value]');\n    const selectEl = root.querySelector('[data-model-select]');\n    const customWrapper = root.querySelector('[data-model-custom]');\n    const customInput = root.querySelector('[data-model-custom-input]');\n    const detailContainer = root.querySelector('[data-model-detail-container]');\n    const lineupContainer = root.querySelector('[data-model-lineup-container]');\n    const labelEl = root.querySelector('[data-model-label]');\n\n    let currentProvider =\n      typeof options.provider === \"string\"\n        ? options.provider\n        : root.dataset.provider || \"openai\";\n    let currentLabel =\n      typeof options.providerLabel === \"string\"\n        ? options.providerLabel\n        : root.dataset.providerLabel || data.labels[currentProvider] || currentProvider;\n\n    const initialValue =\n      typeof options.model === \"string\"\n        ? options.model\n        : hiddenInput instanceof HTMLInputElement\n        ? hiddenInput.value\n        : \"\";\n\n    let currentResolvedValue = initialValue;\n    let currentInputValue = initialValue;\n\n    const setLabel = (label) => {\n      if (labelEl instanceof HTMLElement) {\n        labelEl.textContent = \"Model \u00B7 \" + label;\n      }\n      root.dataset.providerLabel = label;\n    };\n\n    const syncValue = (rawValue, opts = {}) => {\n      const trimmed = typeof rawValue === \"string\" ? rawValue.trim() : \"\";\n      const catalog = getArray(data.catalog[currentProvider]);\n      const defaults = data.defaults || {};\n      const defaultModel =\n        typeof defaults[currentProvider] === \"string\"\n          ? defaults[currentProvider]\n          : catalog[0] && catalog[0].value\n          ? catalog[0].value\n          : \"\";\n      const curatedMatch = trimmed && catalog.some((model) => model && model.value === trimmed);\n      const resolved =\n        curatedMatch || !trimmed ? (curatedMatch ? trimmed : defaultModel) : trimmed;\n\n      ensureOptions(selectEl, currentProvider, trimmed, resolved, data);\n\n      if (selectEl instanceof HTMLSelectElement) {\n        if (curatedMatch || (!trimmed && resolved)) {\n          selectEl.value = resolved || \"\";\n        } else {\n          selectEl.value = \"__custom\";\n        }\n      }\n\n      const showCustom =\n        selectEl instanceof HTMLSelectElement && selectEl.value === \"__custom\";\n      if (customWrapper instanceof HTMLElement) {\n        if (showCustom) {\n          customWrapper.removeAttribute(\"hidden\");\n        } else {\n          customWrapper.setAttribute(\"hidden\", \"true\");\n        }\n      }\n      if (customInput instanceof HTMLInputElement) {\n        if (showCustom) {\n          customInput.value = trimmed;\n          if (opts.focusCustom) {\n            customInput.focus();\n            const end = customInput.value.length;\n            try {\n              customInput.setSelectionRange(end, end);\n            } catch (err) {\n              /* ignore selection errors */\n            }\n          }\n        } else {\n          customInput.value = \"\";\n        }\n      }\n      if (hiddenInput instanceof HTMLInputElement) {\n        hiddenInput.value = resolved || \"\";\n      }\n      currentResolvedValue = hiddenInput instanceof HTMLInputElement ? hiddenInput.value : resolved || \"\";\n      const rawForState = trimmed || resolved || \"\";\n      currentInputValue = rawForState;\n\n      updateDetail(detailContainer, currentProvider, currentResolvedValue, currentInputValue, data);\n      updateLineup(lineupContainer, currentProvider, currentResolvedValue, data);\n    };\n\n    const listeners = new Set();\n    const emitChange = () => {\n      const state = controller.getState();\n      listeners.forEach((listener) => {\n        try {\n          listener(state);\n        } catch (error) {\n          console.error(error);\n        }\n      });\n      root.dispatchEvent(\n        new CustomEvent(\"model-selector:change\", {\n          detail: state,\n        }),\n      );\n    };\n\n    const controller = {\n      setProvider(provider, config = {}) {\n        currentProvider = provider;\n        const label =\n          typeof config.providerLabel === \"string\"\n            ? config.providerLabel\n            : data.labels[provider] || provider;\n        currentLabel = label;\n        setLabel(label);\n        root.dataset.provider = provider;\n        const nextRaw =\n          typeof config.model === \"string\" ? config.model : \"\";\n        syncValue(nextRaw);\n        emitChange();\n      },\n      setValue(value, opts = {}) {\n        syncValue(value, opts);\n        emitChange();\n      },\n      getState() {\n        return {\n          provider: currentProvider,\n          value: currentResolvedValue,\n          input: currentInputValue,\n          providerLabel: currentLabel,\n        };\n      },\n      onChange(listener) {\n        if (typeof listener === \"function\") {\n          listeners.add(listener);\n          return () => {\n            listeners.delete(listener);\n          };\n        }\n        return () => undefined;\n      },\n      focus() {\n        if (selectEl instanceof HTMLSelectElement) {\n          selectEl.focus();\n        }\n      },\n      focusCustom() {\n        if (customInput instanceof HTMLInputElement) {\n          customInput.focus();\n        }\n      },\n    };\n\n    if (selectEl instanceof HTMLSelectElement) {\n      selectEl.addEventListener(\"change\", () => {\n        if (selectEl.value === \"__custom\") {\n          syncValue(\n            customInput instanceof HTMLInputElement ? customInput.value : \"\",\n            { focusCustom: true },\n          );\n          emitChange();\n        } else {\n          syncValue(selectEl.value);\n          emitChange();\n        }\n      });\n    }\n\n    if (customInput instanceof HTMLInputElement) {\n      const handleInput = () => {\n        syncValue(customInput.value);\n        emitChange();\n      };\n      customInput.addEventListener(\"input\", handleInput);\n      customInput.addEventListener(\"change\", handleInput);\n    }\n\n    if (lineupContainer instanceof HTMLElement) {\n      lineupContainer.addEventListener(\"click\", (event) => {\n        const target = event.target instanceof Element ? event.target : null;\n        if (!target) {\n          return;\n        }\n        const button = target.closest('[data-model-choice]');\n        if (!(button instanceof HTMLElement)) {\n          return;\n        }\n        event.preventDefault();\n        const value = button.dataset.modelChoice || \"\";\n        syncValue(value);\n        emitChange();\n      });\n    }\n\n    setLabel(currentLabel);\n    syncValue(initialValue);\n\n    controllers.set(root, controller);\n    return controller;\n  };\n\n  window.__SERVE_LLM_MODEL_SELECTOR = {\n    init,\n  };\n})();";
export declare function renderModelSelectorDataScript(): string;
export { MODEL_INSPECTOR_STYLES };
